#!/bin/bash

# Configuración
COLOR_RED='\033[0;31m'
COLOR_GREEN='\033[0;32m'
COLOR_YELLOW='\033[0;33m'
COLOR_BLUE='\033[0;34m'
COLOR_MAGENTA='\033[0;35m'
COLOR_CYAN='\033[0;36m'
COLOR_WHITE='\033[0;37m'
COLOR_RESET='\033[0m'
COLOR_BOLD='\033[1m'

# Directorios
SHORTCUTS_DIR="$HOME/.shortcuts"
HIDDEN_DIR="$HOME/.hid"
TERMUX_PREFIX="/data/data/com.termux/files/usr"
TERMUX_ETC="$TERMUX_PREFIX/etc"

# Funciones de utilidad
error_msg() {
    echo -e "${COLOR_RED}[ERROR] $1${COLOR_RESET}" >&2
}

info_msg() {
    echo -e "${COLOR_BLUE}[INFO] $1${COLOR_RESET}"
}

success_msg() {
    echo -e "${COLOR_GREEN}[SUCCESS] $1${COLOR_RESET}"
}

warning_msg() {
    echo -e "${COLOR_YELLOW}[WARNING] $1${COLOR_RESET}"
}

# Verificar e instalar paquetes
install_packages() {
    info_msg "Instalando paquetes principales..."
    pkg install -y termux-services bc cronie mlocate wget openssl iproute2 proot \
        resolv-conf python git nano net-tools procps clang libxml2 openssh binutils \
        openssh sshpass termux-api mpv android-tools openjdk-17 libtool neofetch \
        python-tkinter libxslt > /dev/null 2>&1 || {
        error_msg "Fallo al instalar paquetes principales"
        return 1
    }
    
    info_msg "Actualizando base de datos de locate..."
    updatedb
}

# Configurar atajos
setup_shortcuts() {
    info_msg "Configurando atajos..."
    mkdir -p "$SHORTCUTS_DIR" "$HIDDEN_DIR"
    chmod 777 "$SHORTCUTS_DIR"/*
    
    # Mover archivos a directorio oculto
    mv "$SHORTCUTS_DIR"/{int,ext} "$HIDDEN_DIR/" 2>/dev/null
    mv "$SHORTCUTS_DIR"/lxqt-{shutdown,reboot}.desktop "$HIDDEN_DIR/" 2>/dev/null
    
    # Configurar bash.bashrc
    if [ -f "$SHORTCUTS_DIR/bash.bashrc" ]; then
        cp "$SHORTCUTS_DIR/bash.bashrc" "$TERMUX_ETC/"
    fi
}

# Instalar paquetes Python
install_python_packages() {
    info_msg "Instalando paquetes de Python..."
    pip install -q yt-dlp wheel cython lxml yagmail wakeonlan > /dev/null 2>&1
    python -m pip install --upgrade pip > /dev/null 2>&1
}

# Configurar repositorios
configure_repositories() {
    info_msg "Configurando repositorios..."
    
    # Crear menú de selección de repositorio
    PS3="Seleccione un repositorio: "
    options=(
        "Default repositories"
        "GH Mirrors by Kcubeterm"
        "Mirrors by A1batross"
        "Mirrors by Grimler"
        "Mirrors by Kcubeterm"
        "Mirrors by Librehat"
        "Mirrors by Tsinghua University"
        "Mirrors by BFSU"
        "Mirrors by USTC"
        "Salir"
    )
    
    select opt in "${options[@]}"; do
        case $opt in
            "Default repositories")
                set_repository "https://packages.termux.org/apt/termux-main" "stable main"
                break
                ;;
            "GH Mirrors by Kcubeterm")
                set_repository "https://deb.kcubeterm.me/termux-main" "stable main"
                break
                ;;
            "Mirrors by A1batross")
                set_repository "https://termux.mentality.rip/termux-main" "stable main"
                break
                ;;
            "Mirrors by Grimler")
                set_repository "https://grimler.se/termux-packages-24" "stable main"
                break
                ;;
            "Mirrors by Kcubeterm")
                set_repository "https://dl.kcubeterm.me/termux-packages-24" "stable main"
                break
                ;;
            "Mirrors by Librehat")
                set_repository "https://termux.librehat.com/apt/termux-main" "stable main"
                break
                ;;
            "Mirrors by Tsinghua University")
                set_repository "https://mirrors.tuna.tsinghua.edu.cn/termux/apt/termux-main" "stable main"
                break
                ;;
            "Mirrors by BFSU")
                set_repository "https://mirrors.bfsu.edu.cn/termux/apt/termux-main" "stable main"
                break
                ;;
            "Mirrors by USTC")
                set_repository "https://mirrors.ustc.edu.cn/termux/apt/termux-main" "stable main"
                break
                ;;
            "Salir")
                info_msg "Saliendo sin cambiar repositorios"
                return 0
                ;;
            *) 
                error_msg "Opción inválida"
                ;;
        esac
    done
    
    pkg update -y > /dev/null 2>&1
    pkg upgrade -y > /dev/null 2>&1
}

set_repository() {
    local repo_url=$1
    local repo_dist=$2
    
    info_msg "Configurando repositorio: $repo_url"
    echo "deb $repo_url $repo_dist" > "$TERMUX_ETC/apt/sources.list"
    
    # Limpiar otros archivos de repositorio
    rm -f "$TERMUX_ETC/apt/sources.list.d/"*.list 2>/dev/null
}

# Instalar escritorio LXQt
install_lxqt_desktop() {
    info_msg "Instalando escritorio LXQt..."
    git clone -q https://github.com/Yisus7u7/termux-desktop-lxqt "$HOME/termux-desktop-lxqt"
    cd "$HOME/termux-desktop-lxqt" || return 1
    bash install-desktop-lxqt.sh
    git pull
    cd "$HOME" || return 1
}

# Configurar SSH
configure_ssh() {
    info_msg "Configurando SSH..."
    if ! pgrep -x "sshd" > /dev/null; then
        sshd
    fi
    
    echo -e "${COLOR_YELLOW}Usuario actual: $(whoami)${COLOR_RESET}"
    echo -e "${COLOR_CYAN}Ingrese la nueva contraseña para SSH:${COLOR_RESET}"
    passwd
}

# Configurar almacenamiento
configure_storage() {
    info_msg "Configurando enlaces de almacenamiento..."
    
    # Crear directorio temporal
    mkdir -p "$HOME/temp"
    
    # Eliminar enlaces existentes
    unlink "$HOME/Music" 2>/dev/null
    rm -fr "$HOME/Documents" "$HOME/Downloads" "$HOME/Pictures" \
           "$HOME/Public" "$HOME/Templates" "$HOME/Video" "$HOME/basic" 2>/dev/null

    # Preguntar por almacenamiento externo
    read -p "¿Usar almacenamiento externo? (s/n): " use_external
    
    if [[ "$use_external" =~ ^[sSyY].* ]]; then
        info_msg "Abriendo almacenamiento interno para referencia..."
        am start -a android.intent.action.VIEW -d "content://com.android.externalstorage.documents/root/primary" > /dev/null 2>&1
        
        echo -e "${COLOR_RED}Pegue el Nombre de la SD-Card Aquí (ej: D8B3-ACBF):${COLOR_RESET}"
        read -r sd_card
        
        info_msg "Configurando enlaces para SD Card: $sd_card"
        
        # Crear enlaces simbólicos
        ln -sf "/storage/$sd_card/Download" "$HOME/Downloads"
        ln -sf "/storage/$sd_card/Movies" "$HOME/Video"
        ln -sf "/storage/$sd_card/Music" "$HOME/Music"
        ln -sf "/storage/$sd_card/Pictures" "$HOME/Pictures"
        ln -sf "$SHORTCUTS_DIR" "$HOME/ejecutables"
        
        # Configurar directorio storage
        rm -fr "$HOME/storage"
        mkdir -p "$HOME/storage"
        ln -sf "/storage/emulated/0" "$HOME/storage/almacenamiento-Interno"
        ln -sf "/storage/$sd_card" "$HOME/storage/sd-Card"
        
        # Actualizar scripts
        sed -i "s/remp/$sd_card/" "$HIDDEN_DIR/ext"
        sed -i '23 a bash $HOME/.hid/ext' "$SHORTCUTS_DIR/DescargarCualquier"
        sed -i '28 a bash $HOME/.hid/ext' "$SHORTCUTS_DIR/DescargarFbk"
    else
        info_msg "Configurando enlaces para almacenamiento interno..."
        
        ln -sf "/storage/emulated/0/Download" "$HOME/Downloads"
        ln -sf "/storage/emulated/0/Movies" "$HOME/Video"
